import discord
from discord.sinks import WaveSink
import asyncio
import wave
import os
from datetime import datetime
import whisper
from transformers import pipeline
import torch
import json

import security

TOKEN = security.token


class VoiceRecorderCog(discord.Cog):
    def __init__(self, bot: discord.Bot):
        self.bot = bot

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        self.device = "cuda" if torch.cuda.is_available() else "cpu"

        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –∫—ç—à –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        self.default_model_name = "medium"
        self.loaded_whisper_models = {}
        self.loaded_whisper_models[self.default_model_name] = whisper.load_model(self.default_model_name,
                                                                                 device=self.device)

        # –ó–∞–≥—Ä—É–∑—á–∏–∫ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
        self.summarizer = pipeline("summarization", model="t5-small", device=0 if self.device == "cuda" else -1)

        # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∞
        self.settings_file = "server_settings.json"
        self.server_settings = self.load_settings()  # –§–æ—Ä–º–∞—Ç: { "<guild_id>": {"save_folder": ..., "model_name": ...} }

        # –≠—Ñ–µ–º–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∑–∞–ø–∏—Å—å—é (—Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏)
        self.continuous_recording = {}  # { "<guild_id>": bool }
        self.recording_loop_tasks = {}  # { "<guild_id>": asyncio.Task }
        self.transcript_paths = {}  # { "<guild_id>": transcript_file }

    def load_settings(self) -> dict:
        if os.path.exists(self.settings_file):
            try:
                with open(self.settings_file, "r", encoding="utf-8") as f:
                    return json.load(f)
            except json.JSONDecodeError:
                return {}
        else:
            return {}

    def save_settings(self):
        with open(self.settings_file, "w", encoding="utf-8") as f:
            json.dump(self.server_settings, f, ensure_ascii=False, indent=4)

    @discord.Cog.listener()
    async def on_ready(self):
        print(f"‚úÖ Logged in as {self.bot.user}")

    @discord.slash_command(name="join", description="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É")
    async def join(self, ctx: discord.ApplicationContext):
        if ctx.author.voice:
            await ctx.author.voice.channel.connect()
            await ctx.respond("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")
        else:
            await ctx.respond("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")

    @discord.slash_command(name="leave", description="–ü–æ–∫–∏–Ω—É—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª")
    async def leave(self, ctx: discord.ApplicationContext):
        if ctx.guild.voice_client:
            await ctx.guild.voice_client.disconnect()
            await ctx.respond("üëã –û—Ç–∫–ª—é—á–µ–Ω–æ.")
        else:
            await ctx.respond("‚ùå –Ø –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")

    @discord.slash_command(name="record_once", description="–ó–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥")
    async def record_once(self, ctx: discord.ApplicationContext, duration: int):
        vc = ctx.guild.voice_client
        guild_id = str(ctx.guild.id)
        if not vc:
            await ctx.respond("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        if vc.recording or self.continuous_recording.get(guild_id, False):
            await ctx.respond("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await ctx.respond(f"üéô –ò–¥—ë—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ {duration} —Å–µ–∫—É–Ω–¥...")
        sink = WaveSink()
        vc.start_recording(sink, self.on_recording_complete_once, ctx.channel)
        await asyncio.sleep(duration)
        if vc.recording:
            vc.stop_recording()

    async def on_recording_complete_once(self, sink: WaveSink, channel: discord.TextChannel):
        guild_id = str(channel.guild.id)
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äì –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        settings = self.server_settings.get(guild_id,
                                            {"save_folder": "transcripts", "model_name": self.default_model_name})
        save_folder = settings.get("save_folder", "transcripts")
        os.makedirs(save_folder, exist_ok=True)
        transcript_file = os.path.join(save_folder, f"recording_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")

        transcript_entries = []  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–≤—Ä–µ–º—è, —Ä–µ–ø–ª–∏–∫–∞)
        for user_id, audio in sink.audio_data.items():
            try:
                filename = f"temp_{user_id}.wav"
                with wave.open(filename, "wb") as f:
                    f.setnchannels(2)
                    f.setsampwidth(2)
                    f.setframerate(48000)
                    f.writeframes(audio.file.getvalue())

                model_name = settings.get("model_name", self.default_model_name)
                model = self.loaded_whisper_models.get(model_name)
                if model is None:
                    model = await asyncio.to_thread(whisper.load_model, model_name, device=self.device)
                    self.loaded_whisper_models[model_name] = model

                result = await asyncio.to_thread(model.transcribe, filename)
                os.remove(filename)

                user = await self.bot.fetch_user(user_id)
                # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ–ø–ª–∏–∫–∏)
                current_time = datetime.now()
                transcript_line = f"[{current_time.strftime('%H:%M:%S')}] {user.display_name}: {result['text'].strip()}"
                transcript_entries.append((current_time, transcript_line))
                print(f"üìù {transcript_line}")

            except Exception as e:
                await channel.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–µ: {e}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        transcript_entries.sort(key=lambda x: x[0])
        with open(transcript_file, "a", encoding="utf-8") as f:
            for _, line in transcript_entries:
                f.write(line + "\n")

        await channel.send(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ `{transcript_file}`")

    @discord.slash_command(name="record_continuous", description="–ù–∞—á–∞—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∑–∞–ø–∏—Å—å (30-—Å–µ–∫—É–Ω–¥–Ω—ã–º–∏ –æ—Ç—Ä–µ–∑–∫–∞–º–∏)")
    async def record_continuous(self, ctx: discord.ApplicationContext):
        guild_id = str(ctx.guild.id)
        vc = ctx.guild.voice_client
        if not vc:
            await ctx.respond("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        if self.continuous_recording.get(guild_id, False) or vc.recording:
            await ctx.respond("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥—ë—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_recording —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
            return

        settings = self.server_settings.get(guild_id,
                                            {"save_folder": "transcripts", "model_name": self.default_model_name})
        save_folder = settings.get("save_folder", "transcripts")
        os.makedirs(save_folder, exist_ok=True)
        self.transcript_paths[guild_id] = os.path.join(save_folder,
                                                       f"transcript_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")
        self.continuous_recording[guild_id] = True

        await ctx.respond(f"üéô –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞. –¢–µ–∫—Å—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ `{self.transcript_paths[guild_id]}`")
        self.recording_loop_tasks[guild_id] = asyncio.create_task(self.recording_loop(ctx, vc))

    @discord.slash_command(name="stop_recording", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∑–∞–ø–∏—Å—å")
    async def stop_recording(self, ctx: discord.ApplicationContext):
        guild_id = str(ctx.guild.id)
        if not self.continuous_recording.get(guild_id, False):
            await ctx.respond("‚ÑπÔ∏è –ó–∞–ø–∏—Å—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
            return

        self.continuous_recording[guild_id] = False
        # –ï—Å–ª–∏ –±–æ—Ç –≤–µ–¥—ë—Ç –∑–∞–ø–∏—Å—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
        if ctx.guild.voice_client and ctx.guild.voice_client.recording:
            ctx.guild.voice_client.stop_recording()
        await ctx.respond("üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

    async def recording_loop(self, ctx: discord.ApplicationContext, vc: discord.VoiceClient):
        guild_id = str(ctx.guild.id)
        while self.continuous_recording.get(guild_id, False) and vc and vc.is_connected():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–±–æ—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
            if not vc.channel.members or len([m for m in vc.channel.members if not m.bot]) == 0:
                await ctx.followup.send("üë• –í—Å–µ –ø–æ–∫–∏–Ω—É–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏.")
                if vc.recording:
                    vc.stop_recording()
                break

            sink = WaveSink()
            vc.start_recording(sink, self.on_recording_complete, ctx.channel)

            # –ó–∞–ø–∏—Å—å –≤–µ–¥—ë—Ç—Å—è 30 —Å–µ–∫—É–Ω–¥, —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            recording_interrupted = False
            for i in range(30):
                await asyncio.sleep(1)
                if not vc.channel.members or len([m for m in vc.channel.members if not m.bot]) == 0:
                    await ctx.followup.send("üë• –í—Å–µ –ø–æ–∫–∏–Ω—É–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏.")
                    if vc.recording:
                        vc.stop_recording()
                    recording_interrupted = True
                    break
            else:
                if vc.recording:
                    vc.stop_recording()

            if recording_interrupted:
                break

            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç—Ä–µ–∑–∫–∞–º–∏

        self.continuous_recording[guild_id] = False
        await ctx.followup.send("‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    async def on_recording_complete(self, sink: WaveSink, channel: discord.TextChannel):
        guild_id = str(channel.guild.id)
        settings = self.server_settings.get(guild_id,
                                            {"save_folder": "transcripts", "model_name": self.default_model_name})
        transcript_entries = []  # –°–ø–∏—Å–æ–∫ (–≤—Ä–µ–º—è, —Ä–µ–ø–ª–∏–∫–∞)
        for user_id, audio in sink.audio_data.items():
            try:
                filename = f"temp_{user_id}.wav"
                with wave.open(filename, "wb") as f:
                    f.setnchannels(2)
                    f.setsampwidth(2)
                    f.setframerate(48000)
                    f.writeframes(audio.file.getvalue())

                model_name = settings.get("model_name", self.default_model_name)
                model = self.loaded_whisper_models.get(model_name)
                if model is None:
                    model = await asyncio.to_thread(whisper.load_model, model_name, device=self.device)
                    self.loaded_whisper_models[model_name] = model

                result = await asyncio.to_thread(model.transcribe, filename)
                os.remove(filename)

                user = await self.bot.fetch_user(user_id)
                current_time = datetime.now()
                transcript_line = f"[{current_time.strftime('%H:%M:%S')}] {user.display_name}: {result['text'].strip()}"
                transcript_entries.append((current_time, transcript_line))
                print(f"üìù {transcript_line}")

            except Exception as e:
                await channel.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–µ: {e}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –≤ —Ñ–∞–π–ª
        transcript_entries.sort(key=lambda x: x[0])
        transcript_path = self.transcript_paths.get(guild_id, "transcript_default.txt")
        with open(transcript_path, "a", encoding="utf-8") as f:
            for _, line in transcript_entries:
                f.write(line + "\n")

    @discord.slash_command(name="set_save_folder",
                           description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
    async def set_save_folder(self, ctx: discord.ApplicationContext, folder: str):
        guild_id = str(ctx.guild.id)
        settings = self.server_settings.get(guild_id,
                                            {"save_folder": "transcripts", "model_name": self.default_model_name})
        settings["save_folder"] = folder
        self.server_settings[guild_id] = settings
        self.save_settings()
        await ctx.respond(f"‚úÖ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ `{folder}` –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.")

    @discord.slash_command(name="set_transcription_model",
                           description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
    async def set_transcription_model(self, ctx: discord.ApplicationContext, model_name: str):
        guild_id = str(ctx.guild.id)
        settings = self.server_settings.get(guild_id,
                                            {"save_folder": "transcripts", "model_name": self.default_model_name})
        settings["model_name"] = model_name
        self.server_settings[guild_id] = settings
        self.save_settings()

        if model_name not in self.loaded_whisper_models:
            await ctx.respond(f"–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å `{model_name}`... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
            model = await asyncio.to_thread(whisper.load_model, model_name, device=self.device)
            self.loaded_whisper_models[model_name] = model
            await ctx.followup.send(f"‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ `{model_name}` –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.")
        else:
            await ctx.respond(f"‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ `{model_name}` –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.")


intents = discord.Intents.all()
bot = discord.Bot(intents=intents)
bot.add_cog(VoiceRecorderCog(bot))

bot.run(TOKEN)
