import discord
from discord.ext import commands
from discord.ext.voice_recv import VoiceRecvClient, AudioSink
import whisper
from transformers import pipeline
import asyncio
import wave
import os
from datetime import datetime
from security import token

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TOKEN = token
GUILD_ID = 1333447583947034705

# ====== –ù–ê–ß–ê–õ–û –ë–û–¢–ê ======
intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree  # –¥–ª—è slash-–∫–æ–º–∞–Ω–¥

# ====== –ú–û–î–ï–õ–ò ======
whisper_model = whisper.load_model("base")
summarizer = pipeline("summarization", model="t5-small", tokenizer="t5-small")

# ====== –°–ò–ù–ö –î–õ–Ø –ó–ê–ü–ò–°–ò ======
class RecordingSink(AudioSink):
    def __init__(self):
        self.audio_data = {}

    def write(self, user, data):
        if user.id not in self.audio_data:
            self.audio_data[user.id] = {"name": user.display_name, "frames": []}
        self.audio_data[user.id]["frames"].append(data)

    def save_to_wav(self):
        os.makedirs("recordings", exist_ok=True)
        files = []
        for uid, info in self.audio_data.items():
            frames = b"".join(info["frames"])
            filename = f"recordings/{info['name']}_{uid}_{datetime.now().strftime('%H%M%S')}.wav"
            with wave.open(filename, "wb") as wf:
                wf.setnchannels(2)
                wf.setsampwidth(2)
                wf.setframerate(48000)
                wf.writeframes(frames)
            files.append((info['name'], filename))
        return files

# ====== –û–ë–†–ê–ë–û–¢–ö–ê –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø ======
async def process_audio_and_respond(interaction, files):
    full_text = ""

    for username, filename in files:
        await interaction.followup.send(f"üîç –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å {username}...")
        result = whisper_model.transcribe(filename)
        text = result["text"].strip()
        full_text += f"{username}: {text}\n"
        os.remove(filename)

    if not full_text.strip():
        await interaction.followup.send("‚ö†Ô∏è –ü—É—Å—Ç–æ. –ù–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–ª.")
        return

    await interaction.followup.send(f"üìú –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n```{full_text[:1900]}```")

    try:
        summary_input = "summarize: " + full_text
        summary = summarizer(summary_input, max_length=100, min_length=30, do_sample=False)[0]['summary_text']
        await interaction.followup.send(f"üß† –°–≤–æ–¥–∫–∞ –±–µ—Å–µ–¥—ã:\n```{summary}```")
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {str(e)}")

# ====== /join ======
@tree.command(name="join", description="–ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É", guild=discord.Object(id=GUILD_ID))
async def join(interaction: discord.Interaction):
    if interaction.user.voice:
        channel = interaction.user.voice.channel
        await channel.connect(cls=VoiceRecvClient)
        await interaction.response.send_message("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")
    else:
        await interaction.response.send_message("‚ùå –¢—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")

# ====== /record ======
@tree.command(name="record", description="–ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –∏ —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥", guild=discord.Object(id=GUILD_ID))
async def record(interaction: discord.Interaction, duration: int = 10):
    vc = interaction.guild.voice_client
    if not vc or not isinstance(vc, VoiceRecvClient):
        await interaction.response.send_message("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ /join.")
        return

    sink = RecordingSink()
    vc.listen(sink)
    await interaction.response.send_message(f"üéß –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(duration)
    vc.stop_listening()
    files = sink.save_to_wav()
    await process_audio_and_respond(interaction, files)

# ====== /leave ======
@tree.command(name="leave", description="–û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞", guild=discord.Object(id=GUILD_ID))
async def leave(interaction: discord.Interaction):
    if interaction.guild.voice_client:
        await interaction.guild.voice_client.disconnect()
        await interaction.response.send_message("üëã –û—Ç–∫–ª—é—á–∏–ª—Å—è.")
    else:
        await interaction.response.send_message("‚ùå –Ø –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω.")

# ====== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø / –ö–û–ú–ê–ù–î ======
@bot.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {bot.user}")
    await tree.sync(guild=discord.Object(id=GUILD_ID))

# ====== –ó–ê–ü–£–°–ö ======
if __name__ == "__main__":
    bot.run(TOKEN)
