import discord
from discord.ext import commands
import asyncio
import wave
import os
from datetime import datetime
import whisper
from transformers import pipeline

import security

TOKEN = security.token
GUILD_ID = 1333447583947034705

intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

whisper_model = whisper.load_model("base")
summarizer = pipeline("summarization", model="t5-small")

@bot.event
async def on_ready():
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")

@bot.command(name="join")
async def join(ctx):
    if ctx.author.voice:
        channel = ctx.author.voice.channel
        await channel.connect()
        await ctx.send("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")
    else:
        await ctx.send("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")

@bot.command(name="record")
async def record(ctx, duration: int = 10):
    vc = ctx.voice_client
    if not vc:
        await ctx.send("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")
        return

    audio_sink = discord.sinks.WaveSink()
    vc.start_recording(
        audio_sink,
        once_done,
        ctx.channel
    )
    await ctx.send(f"üéß –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(duration)
    vc.stop_recording()

async def once_done(sink: discord.sinks.WaveSink, channel: discord.TextChannel):
    recorded_files = []

    for user_id, audio in sink.audio_data.items():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await channel.guild.fetch_member(user_id)
            username = user.display_name if user else f"user_{user_id}"
        except Exception:
            username = f"user_{user_id}"

        # –°–æ–∑–¥–∞—ë–º –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"{username}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.wav"
        filepath = os.path.join("recordings", filename)

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(filepath), exist_ok=True)

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º WAV-—Ñ–∞–π–ª —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            with wave.open(filepath, "wb") as f:
                f.setnchannels(2)          # –°—Ç–µ—Ä–µ–æ
                f.setsampwidth(2)          # 16 –±–∏—Ç = 2 –±–∞–π—Ç–∞
                f.setframerate(48000)      # 48kHz ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç Discord
                f.writeframes(audio.file.getvalue())

            recorded_files.append((user_id, filepath))
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∞—É–¥–∏–æ: {filepath}")
        except Exception as e:
            await channel.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—É–¥–∏–æ –æ—Ç {username}: {e}")

    if recorded_files:
        await channel.send("üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤...")
        await process_audio_and_respond(channel, recorded_files)
    else:
        await channel.send("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.")


async def process_audio_and_respond(channel, files):
    full_text = ""

    for user_id, filepath in files:
        username = await bot.fetch_user(user_id)
        await channel.send(f"üîç –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å {username}...")
        result = whisper_model.transcribe(filepath)
        text = result["text"].strip()
        full_text += f"{username}: {text}\n"
        os.remove(filepath)

    if not full_text.strip():
        await channel.send("‚ö†Ô∏è –ù–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–ª.")
        return

    await channel.send(f"üìú –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n```{full_text[:1900]}```")

    try:
        summary_input = "summarize: " + full_text
        summary = summarizer(summary_input, max_length=100, min_length=30, do_sample=False)[0]["summary_text"]
        await channel.send(f"üß† –°–≤–æ–¥–∫–∞:\n```{summary}```")
    except Exception as e:
        await channel.send(f"‚ùå –û—à–∏–±–∫–∞ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

@bot.command(name="leave")
async def leave(ctx):
    if ctx.voice_client:
        await ctx.voice_client.disconnect()
        await ctx.send("üëã –û—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
    else:
        await ctx.send("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")

bot.run(TOKEN)
